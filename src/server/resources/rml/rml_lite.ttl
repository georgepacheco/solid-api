@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix rml: <http://semweb.mmlab.be/ns/rml#>.
@prefix ql: <http://semweb.mmlab.be/ns/ql#>.
@prefix sosa: <http://www.w3.org/ns/sosa/>.
@prefix ssn: <https://www.w3.org/ns/ssn/>.
@prefix iot-lite: <http://purl.oclc.org/NET/UNIS/fiware/iot-lite#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix schema: <http://schema.org/>.
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#>.
@prefix om2: <http://www.ontology-of-units-of-measure.org/resource/om-2/>.
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>.
@prefix map: <http://example.com/soft-iot/>.
@prefix m3: <http://purl.org/iot/vocab/m3-lite#>.
@base <--> . #the base for the classes


map:datasource
    rml:source "input";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$[*]".

map:SensingDeviceMap a rr:TriplesMap;
    rml:logicalSource map:datasource;
    
    rr:subjectMap [
        # rr:reference "header.device";
        # rr:class ssn:SensingDevice;
        rr:template "map:{header.device}";
    ];

    # rr:predicateObjectMap [
    #     rr:predicate rdf:about;
    #     rr:objectMap [ 
    #         rr:template "m3:{header.device}";
    #     ];
    # ];

    rr:predicateObjectMap [
        rr:predicate rdf:type;
        rr:objectMap [ 
            rr:template "m3:{header.sensorType}";
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate rdfs:subClassOf;
        rr:objectMap [ 
            rr:template "ssn:{header.parentClass}";
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate iot-lite:hasUnit;
        rr:objectMap [            
            rr:template "om2:{header.unit}"
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate iot-lite:quantityKind;
        rr:objectMap [            
            rr:template "om2:{header.quantityKind}"
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate iot-lite:hasCoverage;
        rr:objectMap [
            rr:parentTriplesMap map:CovarageMap;
        ];
    ];

    rr:predicateObjectMap [
        rr:predicate sosa:madeObservation;
        rr:objectMap [
            rr:parentTriplesMap map:ObservationMap;            
        ]
    ].

map:CovarageMap a rr:TriplesMap;
    rml:logicalSource map:datasource;
    
    rr:subjectMap [
        rr:template "covarage:{header.device}";
        rr:class iot-lite:Coverage;
    ];
    
    rr:predicateObjectMap [
        rr:predicate geo:location;
        rr:objectMap [
           rr:parentTriplesMap map:PointMap;
        ]
    ].

map:PointMap a rr:TriplesMap;
    rml:logicalSource map:datasource;
    
    rr:subjectMap [
        rr:template "point:{header.device}";
        rr:class geo:Point;
    ];
    
    rr:predicateObjectMap [
        rr:predicate geo:long;
        rr:objectMap [
            rr:reference "header.location.long";
            rr:datatype xsd:double
        ]
    ];

    rr:predicateObjectMap [
        rr:predicate geo:lat;
        rr:objectMap [
            rr:reference "header.location.lat";
            rr:datatype xsd:double
        ]
    ].

map:ObservationMap a rr:TriplesMap;
    rml:logicalSource map:datasource;
    
    rr:subjectMap [
        rr:template "observation:{header.observationUUID}";
        rr:class sosa:Observation
    ];
    
    rr:predicateObjectMap [
        rr:predicate sosa:hasSimpleResult;
        rr:objectMap [
            rr:reference "data[0]";
        ]
    ];
    
    rr:predicateObjectMap [
        rr:predicate sosa:resultTime;
        rr:objectMap [
            rr:reference "datetime_pub";
            rr:datatype xsd:dateTIme
        ];
    ].
    